"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddAwsServiceEndpoint = exports.createDefaultIsolatedVpcProps = exports.suppressEncryptedLogWarnings = exports.suppressMapPublicIpWarnings = exports.DefaultVpcProps = exports.getlambdaSecuritygroup = exports.getPrivateSubnetIDs = exports.buildVpc = exports.CheckVpcProps = void 0;
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const kendra_helper_1 = require("./kendra-helper");
const utils_1 = require("./utils");
const types_1 = require("../../patterns/gen-ai/aws-rag-appsync-stepfn-kendra/types");
function CheckVpcProps(propsObject) {
    let errorMessages = '';
    let errorFound = false;
    if ((propsObject.deployVpc || propsObject.vpcProps) && propsObject.existingVpc) {
        errorMessages += 'Error - Either provide an existingVpc or some combination of deployVpc and vpcProps, but not both.\n';
        errorFound = true;
    }
    if (errorFound) {
        throw new Error(errorMessages);
    }
}
exports.CheckVpcProps = CheckVpcProps;
function buildVpc(scope, props) {
    if (props?.existingVpc) {
        return props?.existingVpc;
    }
    let defaultVpcProps = DefaultVpcProps();
    let cumulativeProps = defaultVpcProps;
    // Merge props provided by construct builder and by the end user
    // If user provided props are empty, the vpc will use only the builder provided props
    //cumulativeProps = consolidateProps(cumulativeProps, props?.userVpcProps, props?.constructVpcProps);
    const vpc = new aws_ec2_1.Vpc(scope, 'Vpc', cumulativeProps);
    // Add VPC FlowLogs with the default setting of trafficType:ALL and destination: CloudWatch Logs
    const flowLog = vpc.addFlowLog('FlowLog');
    suppressMapPublicIpWarnings(vpc);
    suppressEncryptedLogWarnings(flowLog);
    return vpc;
}
exports.buildVpc = buildVpc;
// get subnet id for passed vpc.
function getPrivateSubnetIDs(vpc) {
    return vpc.privateSubnets.map(subnet => subnet.subnetId);
}
exports.getPrivateSubnetIDs = getPrivateSubnetIDs;
// get lambda security group for passed VPC
function getlambdaSecuritygroup(scope, vpc) {
    let lambdaSecurityGroup = new aws_ec2_1.SecurityGroup(scope, 'lambdaSecurityGroup', {
        vpc: vpc,
        allowAllOutbound: true,
        description: 'security group for lambda',
        securityGroupName: 'lambdaSecurityGroup',
    });
    return lambdaSecurityGroup;
}
exports.getlambdaSecuritygroup = getlambdaSecuritygroup;
/**
 * @internal This is an internal core function and should not be called directly by Solutions Constructs clients.
 *
 * Creates the default vpc props with public , private_with_egress and private_isolated subnet configuration.
 */
function DefaultVpcProps() {
    return {
        subnetConfiguration: [
            {
                name: 'public',
                subnetType: aws_ec2_1.SubnetType.PUBLIC,
                cidrMask: 24,
            },
            {
                name: 'private',
                subnetType: aws_ec2_1.SubnetType.PRIVATE_WITH_EGRESS,
                cidrMask: 24,
            },
            {
                name: 'isolated',
                subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
                cidrMask: 24,
            },
        ],
        ipAddresses: aws_ec2_1.IpAddresses.cidr('10.0.0.0/16'),
    };
}
exports.DefaultVpcProps = DefaultVpcProps;
function suppressMapPublicIpWarnings(vpc) {
    // Add Cfn Nag suppression for PUBLIC subnets to suppress WARN W33: EC2 Subnet should not have MapPublicIpOnLaunch set to true
    vpc.publicSubnets.forEach((subnet) => {
        const cfnSubnet = subnet.node.defaultChild;
        (0, utils_1.addCfnSuppressRules)(cfnSubnet, [
            {
                id: 'W33',
                reason: 'Allow Public Subnets to have MapPublicIpOnLaunch set to true',
            },
        ]);
    });
}
exports.suppressMapPublicIpWarnings = suppressMapPublicIpWarnings;
function suppressEncryptedLogWarnings(flowLog) {
    // Add Cfn Nag suppression for CloudWatchLogs LogGroups data is encrypted
    const cfnLogGroup = flowLog.logGroup?.node.defaultChild;
    (0, utils_1.addCfnSuppressRules)(cfnLogGroup, [
        {
            id: 'W84',
            reason: 'By default CloudWatchLogs LogGroups data is encrypted using the CloudWatch server-side encryption keys (AWS Managed Keys)',
        },
    ]);
}
exports.suppressEncryptedLogWarnings = suppressEncryptedLogWarnings;
function AddInterfaceEndpoint(scope, vpc, service, interfaceTag) {
    const endpointDefaultSecurityGroup = (0, kendra_helper_1.buildSecurityGroup)(scope, `${scope.node.id}-${service.endpointName}`, {
        vpc,
        allowAllOutbound: true,
    }, [{ peer: aws_ec2_1.Peer.ipv4(vpc.vpcCidrBlock), connection: aws_ec2_1.Port.tcp(443) }], []);
    vpc.addInterfaceEndpoint(interfaceTag, {
        service: service.endpointInterfaceService,
        securityGroups: [endpointDefaultSecurityGroup],
    });
}
function createDefaultIsolatedVpcProps() {
    return {
        natGateways: 0,
        subnetConfiguration: [
            {
                cidrMask: 18,
                name: 'isolated',
                subnetType: aws_ec2_1.SubnetType.PRIVATE_ISOLATED,
            },
        ],
    };
}
exports.createDefaultIsolatedVpcProps = createDefaultIsolatedVpcProps;
function AddGatewayEndpoint(vpc, service, interfaceTag) {
    vpc.addGatewayEndpoint(interfaceTag, {
        service: service.endpointGatewayService,
    });
}
function CheckIfEndpointAlreadyExists(vpc, interfaceTag) {
    return vpc.node.children.some((child) => child.node.id === interfaceTag);
}
const endpointSettings = [
    {
        endpointName: types_1.ServiceEndpointTypeEnum.DYNAMODB,
        endpointType: types_1.EndpointTypes.GATEWAY,
        endpointGatewayService: aws_ec2_1.GatewayVpcEndpointAwsService.DYNAMODB,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.S3,
        endpointType: types_1.EndpointTypes.GATEWAY,
        endpointGatewayService: aws_ec2_1.GatewayVpcEndpointAwsService.S3,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.STEP_FUNCTIONS,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.STEP_FUNCTIONS,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.SNS,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SNS,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.SQS,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SQS,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.SAGEMAKER_RUNTIME,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SAGEMAKER_RUNTIME,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.SECRETS_MANAGER,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SECRETS_MANAGER,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.SSM,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.SSM,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.ECR_API,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.ECR_DKR,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.ECR_DOCKER,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.EVENTS,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.CLOUDWATCH_EVENTS,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.KINESIS_FIREHOSE,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.KINESIS_FIREHOSE,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.KINESIS_STREAMS,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.KINESIS_STREAMS,
    },
    {
        endpointName: types_1.ServiceEndpointTypeEnum.KENDRA,
        endpointType: types_1.EndpointTypes.INTERFACE,
        endpointInterfaceService: aws_ec2_1.InterfaceVpcEndpointAwsService.KENDRA,
    },
];
function AddAwsServiceEndpoint(scope, vpc, interfaceTag) {
    if (CheckIfEndpointAlreadyExists(vpc, interfaceTag)) {
        return;
    }
    const service = endpointSettings.find((endpoint) => endpoint.endpointName === interfaceTag);
    if (!service) {
        throw new Error('Unsupported Service sent to AddServiceEndpoint');
    }
    if (service.endpointType === types_1.EndpointTypes.GATEWAY) {
        AddGatewayEndpoint(vpc, service, interfaceTag);
    }
    if (service.endpointType === types_1.EndpointTypes.INTERFACE) {
        AddInterfaceEndpoint(scope, vpc, service, interfaceTag);
    }
    // ESLint requires this return statement, so disabling SonarQube warning
    return; // NOSONAR
}
exports.AddAwsServiceEndpoint = AddAwsServiceEndpoint;
//# sourceMappingURL=data:application/json;base64,