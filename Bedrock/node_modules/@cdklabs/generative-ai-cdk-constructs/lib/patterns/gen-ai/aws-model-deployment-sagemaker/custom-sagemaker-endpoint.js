"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomSageMakerEndpoint = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const cdk = require("aws-cdk-lib");
const iam = require("aws-cdk-lib/aws-iam");
const kms = require("aws-cdk-lib/aws-kms");
const sagemaker = require("aws-cdk-lib/aws-sagemaker");
const sns = require("aws-cdk-lib/aws-sns");
const sagemaker_endpoint_base_1 = require("./sagemaker-endpoint-base");
const base_class_1 = require("../../../common/base-class");
class CustomSageMakerEndpoint extends sagemaker_endpoint_base_1.SageMakerEndpointBase {
    constructor(scope, id, props) {
        super(scope, id);
        const baseProps = {
            constructName: base_class_1.ConstructName.CUSTOMSAGEMAKERENDPOINT,
            constructId: id,
        };
        // No lambda function to use AWS SDK for service metric
        const lambdaFunctions = [];
        this.updateConstructUsageMetricCode(baseProps, scope, lambdaFunctions);
        this.instanceType = props.instanceType;
        this.modelId = props.modelId;
        this.instanceCount = Math.max(1, props.instanceCount ?? 1);
        this.role = props.role ?? this.createSageMakerRole();
        this.grantPrincipal = this.role;
        this.modelDataUrl = props.modelDataUrl;
        this.startupHealthCheckTimeoutInSeconds = props.startupHealthCheckTimeoutInSeconds ?? 600;
        this.environment = props.environment;
        this.modelDataDownloadTimeoutInSeconds = props.modelDataDownloadTimeoutInSeconds ?? 600;
        const image = props.container.bind(this, this.grantPrincipal).imageName;
        const modelIdStr = this.modelId.split('/').join('-').split('.').join('-');
        const isArtifactCompressed = this.modelDataUrl.endsWith('.tar.gz');
        const model = new sagemaker.CfnModel(scope, `${modelIdStr}-model-${id}`, {
            executionRoleArn: this.role.roleArn,
            primaryContainer: isArtifactCompressed ? {
                image,
                mode: 'SingleModel',
                modelDataUrl: this.modelDataUrl,
                environment: {
                    SAGEMAKER_REGION: cdk.Aws.REGION,
                    ...this.environment,
                },
            } : {
                image,
                mode: 'SingleModel',
                modelDataSource: {
                    s3DataSource: {
                        compressionType: 'None',
                        s3DataType: 'S3Prefix',
                        s3Uri: this.modelDataUrl,
                    },
                },
                environment: {
                    SAGEMAKER_REGION: cdk.Aws.REGION,
                    ...this.environment,
                },
            },
            tags: [
                {
                    key: 'modelId',
                    value: this.modelId,
                },
            ],
            vpcConfig: props.vpcConfig,
        });
        const endpointConfig = new sagemaker.CfnEndpointConfig(scope, `EndpointConfig-${id}`, {
            productionVariants: [
                {
                    instanceType: this.instanceType.toString(),
                    initialVariantWeight: 1,
                    initialInstanceCount: this.instanceCount,
                    variantName: 'AllTraffic',
                    volumeSizeInGb: props.volumeSizeInGb,
                    modelName: model.getAtt('ModelName').toString(),
                    containerStartupHealthCheckTimeoutInSeconds: this.startupHealthCheckTimeoutInSeconds,
                    modelDataDownloadTimeoutInSeconds: this.modelDataDownloadTimeoutInSeconds,
                },
            ],
        });
        if (props.asyncInference) {
            // build sns topics for success and failure
            const successTopic = this.buildSnsTopic(`success-topic-${id}`, 'Success Topic');
            const failureTopic = this.buildSnsTopic(`failure-topic-${id}`, 'Failure Topic');
            this.errorTopic = failureTopic;
            this.successTopic = successTopic;
            // configure async inference
            const asyncInferenceConfigProperty = {
                outputConfig: {
                    s3FailurePath: props.asyncInference.failurePath,
                    s3OutputPath: props.asyncInference.outputPath,
                    notificationConfig: {
                        successTopic: successTopic.topicArn,
                        errorTopic: failureTopic.topicArn,
                    },
                },
                clientConfig: {
                    maxConcurrentInvocationsPerInstance: props.asyncInference.maxConcurrentInvocationsPerInstance ?? 10,
                },
            };
            endpointConfig.asyncInferenceConfig = asyncInferenceConfigProperty;
        }
        endpointConfig.addDependency(model);
        const endpoint = new sagemaker.CfnEndpoint(scope, `${modelIdStr}-endpoint-${id}`, {
            endpointName: props.endpointName,
            endpointConfigName: endpointConfig.getAtt('EndpointConfigName').toString(),
            tags: [
                {
                    key: 'modelId',
                    value: this.modelId,
                },
            ],
        });
        endpoint.addDependency(endpointConfig);
        this.cfnModel = model;
        this.cfnEndpoint = endpoint;
        this.cfnEndpointConfig = endpointConfig;
        this.endpointArn = endpoint.ref;
    }
    addToRolePolicy(statement) {
        if (!this.role) {
            return;
        }
        this.role.addToPolicy(statement);
    }
    grantInvoke(grantee) {
        return iam.Grant.addToPrincipal({
            grantee,
            actions: ['sagemaker:InvokeEndpoint'],
            resourceArns: [this.endpointArn],
        });
    }
    buildSnsTopic(topicName, displayName) {
        const masterKey = kms.Alias.fromAliasName(this, `aws-managed-key-${topicName}`, 'alias/aws/sns');
        const topic = new sns.Topic(this, topicName, {
            topicName,
            displayName,
            masterKey: masterKey,
        });
        topic.grantPublish(this.role);
        topic.addToResourcePolicy(new iam.PolicyStatement({
            actions: ['sns:Publish'],
            effect: iam.Effect.DENY,
            resources: [topic.topicArn],
            conditions: {
                Bool: {
                    'aws:SecureTransport': 'false',
                },
            },
            principals: [new iam.AnyPrincipal()],
        }));
        return topic;
    }
}
exports.CustomSageMakerEndpoint = CustomSageMakerEndpoint;
_a = JSII_RTTI_SYMBOL_1;
CustomSageMakerEndpoint[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.CustomSageMakerEndpoint", version: "0.1.264" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXNhZ2VtYWtlci1lbmRwb2ludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wYXR0ZXJucy9nZW4tYWkvYXdzLW1vZGVsLWRlcGxveW1lbnQtc2FnZW1ha2VyL2N1c3RvbS1zYWdlbWFrZXItZW5kcG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUNILG1DQUFtQztBQUNuQywyQ0FBMkM7QUFDM0MsMkNBQTJDO0FBQzNDLHVEQUF1RDtBQUN2RCwyQ0FBMkM7QUFHM0MsdUVBQWtFO0FBRWxFLDJEQUEyRDtBQTBCM0QsTUFBYSx1QkFBd0IsU0FBUSwrQ0FBcUI7SUFrQmhFLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBbUM7UUFDM0UsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLFNBQVMsR0FBbUI7WUFDaEMsYUFBYSxFQUFFLDBCQUFhLENBQUMsdUJBQXVCO1lBQ3BELFdBQVcsRUFBRSxFQUFFO1NBQ2hCLENBQUM7UUFFRix1REFBdUQ7UUFDdkQsTUFBTSxlQUFlLEdBQXlDLEVBQUUsQ0FBQztRQUNqRSxJQUFJLENBQUMsOEJBQThCLENBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztRQUV4RSxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDdkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDckQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJ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QUFDLElBQUk7WUFDdkIsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztZQUMzQixVQUFVLEVBQUU7Z0JBQ1YsSUFBSSxFQUFFO29CQUNKLHFCQUFxQixFQUFFLE9BQU87aUJBQy9CO2FBQ0Y7WUFDRCxVQUFVLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNyQyxDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7QUFyTEgsMERBc0xDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBrbXMgZnJvbSAnYXdzLWNkay1saWIvYXdzLWttcyc7XG5pbXBvcnQgKiBhcyBzYWdlbWFrZXIgZnJvbSAnYXdzLWNkay1saWIvYXdzLXNhZ2VtYWtlcic7XG5pbXBvcnQgKiBhcyBzbnMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXNucyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IENvbnRhaW5lckltYWdlIH0gZnJvbSAnLi9jb250YWluZXItaW1hZ2UnO1xuaW1wb3J0IHsgU2FnZU1ha2VyRW5kcG9pbnRCYXNlIH0gZnJvbSAnLi9zYWdlbWFrZXItZW5kcG9pbnQtYmFzZSc7XG5pbXBvcnQgeyBTYWdlTWFrZXJJbnN0YW5jZVR5cGUgfSBmcm9tICcuL3NhZ2VtYWtlci1pbnN0YW5jZS10eXBlJztcbmltcG9ydCB7IENvbnN0cnVjdE5hbWUgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vYmFzZS1jbGFzcyc7XG5pbXBvcnQgeyBCYXNlQ2xhc3NQcm9wcyB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9iYXNlLWNsYXNzL2Jhc2UtY2xhc3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFzeW5jSW5mZXJlbmNlQ29uZmlnIHtcbiAgcmVhZG9ubHkgZmFpbHVyZVBhdGg6IHN0cmluZztcbiAgcmVhZG9ubHkgb3V0cHV0UGF0aDogc3RyaW5nO1xuICByZWFkb25seSBtYXhDb25jdXJyZW50SW52b2NhdGlvbnNQZXJJbnN0YW5jZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21TYWdlTWFrZXJFbmRwb2ludFByb3BzIHtcbiAgcmVhZG9ubHkgbW9kZWxJZDogc3RyaW5nO1xuICByZWFkb25seSBlbmRwb2ludE5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgaW5zdGFuY2VUeXBlOiBTYWdlTWFrZXJJbnN0YW5jZVR5cGU7XG4gIHJlYWRvbmx5IGNvbnRhaW5lcjogQ29udGFpbmVySW1hZ2U7XG4gIHJlYWRvbmx5IGluc3RhbmNlQ291bnQ/OiBudW1iZXI7XG4gIHJlYWRvbmx5IHJvbGU/OiBpYW0uUm9sZTtcbiAgcmVhZG9ubHkgZW52aXJvbm1lbnQ/OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuICByZWFkb25seSBzdGFydHVwSGVhbHRoQ2hlY2tUaW1lb3V0SW5TZWNvbmRzPzogbnVtYmVyO1xuICByZWFkb25seSBtb2RlbERhdGFEb3dubG9hZFRpbWVvdXRJblNlY29uZHM/OiBudW1iZXI7XG4gIHJlYWRvbmx5IHZvbHVtZVNpemVJbkdiPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSB2cGNDb25maWc/OiBzYWdlbWFrZXIuQ2ZuTW9kZWwuVnBjQ29uZmlnUHJvcGVydHkgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IG1vZGVsRGF0YVVybDogc3RyaW5nO1xuICByZWFkb25seSBhc3luY0luZmVyZW5jZT86IEFzeW5jSW5mZXJlbmNlQ29uZmlnIHwgdW5kZWZpbmVkO1xuXG59XG5cbmV4cG9ydCBjbGFzcyBDdXN0b21TYWdlTWFrZXJFbmRwb2ludCBleHRlbmRzIFNhZ2VNYWtlckVuZHBvaW50QmFzZSBpbXBsZW1lbnRzIGlhbS5JR3JhbnRhYmxlIHtcbiAgcHVibGljIHJlYWRvbmx5IGdyYW50UHJpbmNpcGFsOiBpYW0uSVByaW5jaXBhbDtcbiAgcHVibGljIHJlYWRvbmx5IGVuZHBvaW50QXJuOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBjZm5Nb2RlbDogc2FnZW1ha2VyLkNmbk1vZGVsO1xuICBwdWJsaWMgcmVhZG9ubHkgY2ZuRW5kcG9pbnQ6IHNhZ2VtYWtlci5DZm5FbmRwb2ludDtcbiAgcHVibGljIHJlYWRvbmx5IGNmbkVuZHBvaW50Q29uZmlnOiBzYWdlbWFrZXIuQ2ZuRW5kcG9pbnRDb25maWc7XG4gIHB1YmxpYyByZWFkb25seSBzdWNjZXNzVG9waWM/OiBzbnMuVG9waWM7XG4gIHB1YmxpYyByZWFkb25seSBlcnJvclRvcGljPzogc25zLlRvcGljO1xuXG4gIHB1YmxpYyByZWFkb25seSBpbnN0YW5jZVR5cGU/OiBTYWdlTWFrZXJJbnN0YW5jZVR5cGU7XG4gIHB1YmxpYyByZWFkb25seSBpbnN0YW5jZUNvdW50OiBudW1iZXI7XG4gIHB1YmxpYyByZWFkb25seSByb2xlOiBpYW0uUm9sZTtcbiAgcHVibGljIHJlYWRvbmx5IG1vZGVsRGF0YVVybDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgbW9kZWxJZDogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgbW9kZWxEYXRhRG93bmxvYWRUaW1lb3V0SW5TZWNvbmRzOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhcnR1cEhlYWx0aENoZWNrVGltZW91dEluU2Vjb25kczogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGVudmlyb25tZW50PzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ3VzdG9tU2FnZU1ha2VyRW5kcG9pbnRQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBjb25zdCBiYXNlUHJvcHM6IEJhc2VDbGFzc1Byb3BzID0ge1xuICAgICAgY29uc3RydWN0TmFtZTogQ29uc3RydWN0TmFtZS5DVVNUT01TQUdFTUFLRVJFTkRQT0lOVCxcbiAgICAgIGNvbnN0cnVjdElkOiBpZCxcbiAgICB9O1xuXG4gICAgLy8gTm8gbGFtYmRhIGZ1bmN0aW9uIHRvIHVzZSBBV1MgU0RLIGZvciBzZXJ2aWNlIG1ldHJpY1xuICAgIGNvbnN0IGxhbWJkYUZ1bmN0aW9uczogY2RrLmF3c19sYW1iZGEuRG9ja2VySW1hZ2VGdW5jdGlvbltdID0gW107XG4gICAgdGhpcy51cGRhdGVDb25zdHJ1Y3RVc2FnZU1ldHJpY0NvZGUoIGJhc2VQcm9wcywgc2NvcGUsIGxhbWJkYUZ1bmN0aW9ucyk7XG5cbiAgICB0aGlzLmluc3RhbmNlVHlwZSA9IHByb3BzLmluc3RhbmNlVHlwZTtcbiAgICB0aGlzLm1vZGVsSWQgPSBwcm9wcy5tb2RlbElkO1xuICAgIHRoaXMuaW5zdGFuY2VDb3VudCA9IE1hdGgubWF4KDEsIHByb3BzLmluc3RhbmNlQ291bnQgPz8gMSk7XG4gICAgdGhpcy5yb2xlID0gcHJvcHMucm9sZSA/PyB0aGlzLmNyZWF0ZVNhZ2VNYWtlclJvbGUoKTtcbiAgICB0aGlzLmdyYW50UHJpbmNpcGFsID0gdGhpcy5yb2xlO1xuICAgIHRoaXMubW9kZWxEYXRhVXJsID0gcHJvcHMubW9kZWxEYXRhVXJsO1xuICAgIHRoaXMuc3RhcnR1cEhlYWx0aENoZWNrVGltZW91dEluU2Vjb25kcyA9IHByb3BzLnN0YXJ0dXBIZWFsdGhDaGVja1RpbWVvdXRJblNlY29uZHMgPz8gNjAwO1xuICAgIHRoaXMuZW52aXJvbm1lbnQgPSBwcm9wcy5lbnZpcm9ubWVudDtcbiAgICB0aGlzLm1vZGVsRGF0YURvd25sb2FkVGltZW91dEluU2Vjb25kcyA9IHByb3BzLm1vZGVsRGF0YURvd25sb2FkVGltZW91dEluU2Vjb25kcyA/PyA2MDA7XG5cbiAgICBjb25zdCBpbWFnZSA9IHByb3BzLmNvbnRhaW5lci5iaW5kKHRoaXMsIHRoaXMuZ3JhbnRQcmluY2lwYWwpLmltYWdlTmFtZTtcbiAgICBjb25zdCBtb2RlbElkU3RyID0gdGhpcy5tb2RlbElkLnNwbGl0KCcvJykuam9pbignLScpLnNwbGl0KCcuJykuam9pbignLScpO1xuICAgIGNvbnN0IGlzQXJ0aWZhY3RDb21wcmVzc2VkID0gdGhpcy5tb2RlbERhdGFVcmwuZW5kc1dpdGgoJy50YXIuZ3onKTtcblxuICAgIGNvbnN0IG1vZGVsID0gbmV3IHNhZ2VtYWtlci5DZm5Nb2RlbChzY29wZSwgYCR7bW9kZWxJZFN0cn0tbW9kZWwtJHtpZH1gLCB7XG4gICAgICBleGVjdXRpb25Sb2xlQXJuOiB0aGlzLnJvbGUucm9sZUFybixcbiAgICAgIHByaW1hcnlDb250YWluZXI6IGlzQXJ0aWZhY3RDb21wcmVzc2VkID8ge1xuICAgICAgICBpbWFnZSxcbiAgICAgICAgbW9kZTogJ1NpbmdsZU1vZGVsJyxcbiAgICAgICAgbW9kZWxEYXRhVXJsOiB0aGlzLm1vZGVsRGF0YVVybCxcbiAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICBTQUdFTUFLRVJfUkVHSU9OOiBjZGsuQXdzLlJFR0lPTixcbiAgICAgICAgICAuLi50aGlzLmVudmlyb25tZW50LFxuICAgICAgICB9LFxuICAgICAgfSA6IHtcbiAgICAgICAgaW1hZ2UsXG4gICAgICAgIG1vZGU6ICdTaW5nbGVNb2RlbCcsXG4gICAgICAgIG1vZGVsRGF0YVNvdXJjZToge1xuICAgICAgICAgIHMzRGF0YVNvdXJjZToge1xuICAgICAgICAgICAgY29tcHJlc3Npb25UeXBlOiAnTm9uZScsXG4gICAgICAgICAgICBzM0RhdGFUeXBlOiAnUzNQcmVmaXgnLFxuICAgICAgICAgICAgczNVcmk6IHRoaXMubW9kZWxEYXRhVXJsLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgU0FHRU1BS0VSX1JFR0lPTjogY2RrLkF3cy5SRUdJT04sXG4gICAgICAgICAgLi4udGhpcy5lbnZpcm9ubWVudCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB0YWdzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBrZXk6ICdtb2RlbElkJyxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5tb2RlbElkLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHZwY0NvbmZpZzogcHJvcHMudnBjQ29uZmlnLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZW5kcG9pbnRDb25maWcgPSBuZXcgc2FnZW1ha2VyLkNmbkVuZHBvaW50Q29uZmlnKHNjb3BlLCBgRW5kcG9pbnRDb25maWctJHtpZH1gLCB7XG4gICAgICBwcm9kdWN0aW9uVmFyaWFudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGluc3RhbmNlVHlwZTogdGhpcy5pbnN0YW5jZVR5cGUudG9TdHJpbmcoKSxcbiAgICAgICAgICBpbml0aWFsVmFyaWFudFdlaWdodDogMSxcbiAgICAgICAgICBpbml0aWFsSW5zdGFuY2VDb3VudDogdGhpcy5pbnN0YW5jZUNvdW50LFxuICAgICAgICAgIHZhcmlhbnROYW1lOiAnQWxsVHJhZmZpYycsXG4gICAgICAgICAgdm9sdW1lU2l6ZUluR2I6IHByb3BzLnZvbHVtZVNpemVJbkdiLFxuICAgICAgICAgIG1vZGVsTmFtZTogbW9kZWwuZ2V0QXR0KCdNb2RlbE5hbWUnKS50b1N0cmluZygpLFxuICAgICAgICAgIGNvbnRhaW5lclN0YXJ0dXBIZWFsdGhDaGVja1RpbWVvdXRJblNlY29uZHM6IHRoaXMuc3RhcnR1cEhlYWx0aENoZWNrVGltZW91dEluU2Vjb25kcyxcbiAgICAgICAgICBtb2RlbERhdGFEb3dubG9hZFRpbWVvdXRJblNlY29uZHM6IHRoaXMubW9kZWxEYXRhRG93bmxvYWRUaW1lb3V0SW5TZWNvbmRzLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGlmIChwcm9wcy5hc3luY0luZmVyZW5jZSkge1xuXG4gICAgICAvLyBidWlsZCBzbnMgdG9waWNzIGZvciBzdWNjZXNzIGFuZCBmYWlsdXJlXG4gICAgICBjb25zdCBzdWNjZXNzVG9waWMgPSB0aGlzLmJ1aWxkU25zVG9waWMoYHN1Y2Nlc3MtdG9waWMtJHtpZH1gLCAnU3VjY2VzcyBUb3BpYycpO1xuICAgICAgY29uc3QgZmFpbHVyZVRvcGljID0gdGhpcy5idWlsZFNuc1RvcGljKGBmYWlsdXJlLXRvcGljLSR7aWR9YCwgJ0ZhaWx1cmUgVG9waWMnKTtcblxuICAgICAgdGhpcy5lcnJvclRvcGljID0gZmFpbHVyZVRvcGljO1xuICAgICAgdGhpcy5zdWNjZXNzVG9waWMgPSBzdWNjZXNzVG9waWM7XG5cbiAgICAgIC8vIGNvbmZpZ3VyZSBhc3luYyBpbmZlcmVuY2VcbiAgICAgIGNvbnN0IGFzeW5jSW5mZXJlbmNlQ29uZmlnUHJvcGVydHk6IHNhZ2VtYWtlci5DZm5FbmRwb2ludENvbmZpZy5Bc3luY0luZmVyZW5jZUNvbmZpZ1Byb3BlcnR5ID0ge1xuICAgICAgICBvdXRwdXRDb25maWc6IHtcbiAgICAgICAgICBzM0ZhaWx1cmVQYXRoOiBwcm9wcy5hc3luY0luZmVyZW5jZS5mYWlsdXJlUGF0aCxcbiAgICAgICAgICBzM091dHB1dFBhdGg6IHByb3BzLmFzeW5jSW5mZXJlbmNlLm91dHB1dFBhdGgsXG4gICAgICAgICAgbm90aWZpY2F0aW9uQ29uZmlnOiB7XG4gICAgICAgICAgICBzdWNjZXNzVG9waWM6IHN1Y2Nlc3NUb3BpYy50b3BpY0FybixcbiAgICAgICAgICAgIGVycm9yVG9waWM6IGZhaWx1cmVUb3BpYy50b3BpY0FybixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBjbGllbnRDb25maWc6IHtcbiAgICAgICAgICBtYXhDb25jdXJyZW50SW52b2NhdGlvbnNQZXJJbnN0YW5jZTogcHJvcHMuYXN5bmNJbmZlcmVuY2UubWF4Q29uY3VycmVudEludm9jYXRpb25zUGVySW5zdGFuY2UgPz8gMTAsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBlbmRwb2ludENvbmZpZy5hc3luY0luZmVyZW5jZUNvbmZpZyA9IGFzeW5jSW5mZXJlbmNlQ29uZmlnUHJvcGVydHk7XG4gICAgfVxuXG4gICAgZW5kcG9pbnRDb25maWcuYWRkRGVwZW5kZW5jeShtb2RlbCk7XG5cbiAgICBjb25zdCBlbmRwb2ludCA9IG5ldyBzYWdlbWFrZXIuQ2ZuRW5kcG9pbnQoc2NvcGUsIGAke21vZGVsSWRTdHJ9LWVuZHBvaW50LSR7aWR9YCwge1xuICAgICAgZW5kcG9pbnROYW1lOiBwcm9wcy5lbmRwb2ludE5hbWUsXG4gICAgICBlbmRwb2ludENvbmZpZ05hbWU6IGVuZHBvaW50Q29uZmlnLmdldEF0dCgnRW5kcG9pbnRDb25maWdOYW1lJykudG9TdHJpbmcoKSxcbiAgICAgIHRhZ3M6IFtcbiAgICAgICAge1xuICAgICAgICAgIGtleTogJ21vZGVsSWQnLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLm1vZGVsSWQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pO1xuXG4gICAgZW5kcG9pbnQuYWRkRGVwZW5kZW5jeShlbmRwb2ludENvbmZpZyk7XG5cbiAgICB0aGlzLmNmbk1vZGVsID0gbW9kZWw7XG4gICAgdGhpcy5jZm5FbmRwb2ludCA9IGVuZHBvaW50O1xuICAgIHRoaXMuY2ZuRW5kcG9pbnRDb25maWcgPSBlbmRwb2ludENvbmZpZztcbiAgICB0aGlzLmVuZHBvaW50QXJuID0gZW5kcG9pbnQucmVmO1xuICB9XG5cbiAgcHVibGljIGFkZFRvUm9sZVBvbGljeShzdGF0ZW1lbnQ6IGlhbS5Qb2xpY3lTdGF0ZW1lbnQpIHtcbiAgICBpZiAoIXRoaXMucm9sZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucm9sZS5hZGRUb1BvbGljeShzdGF0ZW1lbnQpO1xuICB9XG5cbiAgcHVibGljIGdyYW50SW52b2tlKGdyYW50ZWU6IGlhbS5JR3JhbnRhYmxlKTogaWFtLkdyYW50IHtcbiAgICByZXR1cm4gaWFtLkdyYW50LmFkZFRvUHJpbmNpcGFsKHtcbiAgICAgIGdyYW50ZWUsXG4gICAgICBhY3Rpb25zOiBbJ3NhZ2VtYWtlcjpJbnZva2VFbmRwb2ludCddLFxuICAgICAgcmVzb3VyY2VBcm5zOiBbdGhpcy5lbmRwb2ludEFybl0sXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkU25zVG9waWModG9waWNOYW1lOiBzdHJpbmcsIGRpc3BsYXlOYW1lOiBzdHJpbmcpOiBzbnMuVG9waWMge1xuICAgIGNvbnN0IG1hc3RlcktleSA9IGttcy5BbGlhcy5mcm9tQWxpYXNOYW1lKHRoaXMsIGBhd3MtbWFuYWdlZC1rZXktJHt0b3BpY05hbWV9YCwgJ2FsaWFzL2F3cy9zbnMnKTtcblxuICAgIGNvbnN0IHRvcGljID0gbmV3IHNucy5Ub3BpYyh0aGlzLCB0b3BpY05hbWUsIHtcbiAgICAgIHRvcGljTmFtZSxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgbWFzdGVyS2V5OiBtYXN0ZXJLZXksXG4gICAgfSk7XG5cbiAgICB0b3BpYy5ncmFudFB1Ymxpc2godGhpcy5yb2xlKTtcblxuICAgIHRvcGljLmFkZFRvUmVzb3VyY2VQb2xpY3kobmV3IGlhbS5Qb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgYWN0aW9uczogWydzbnM6UHVibGlzaCddLFxuICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkRFTlksXG4gICAgICByZXNvdXJjZXM6IFt0b3BpYy50b3BpY0Fybl0sXG4gICAgICBjb25kaXRpb25zOiB7XG4gICAgICAgIEJvb2w6IHtcbiAgICAgICAgICAnYXdzOlNlY3VyZVRyYW5zcG9ydCc6ICdmYWxzZScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgcHJpbmNpcGFsczogW25ldyBpYW0uQW55UHJpbmNpcGFsKCldLFxuICAgIH0pKTtcblxuICAgIHJldHVybiB0b3BpYztcbiAgfVxufSJdfQ==