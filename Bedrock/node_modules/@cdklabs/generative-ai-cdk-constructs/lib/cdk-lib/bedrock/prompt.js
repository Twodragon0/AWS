"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Prompt = exports.PromptVariant = exports.PromptTemplateType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const constructs_1 = require("constructs");
var PromptTemplateType;
(function (PromptTemplateType) {
    PromptTemplateType["TEXT"] = "TEXT";
})(PromptTemplateType || (exports.PromptTemplateType = PromptTemplateType = {}));
/**
 * Variants are specific sets of inputs that guide FMs on Amazon Bedrock to
 * generate an appropriate response or output for a given task or instruction.
 * You can optimize the prompt for specific use cases and models.
 */
class PromptVariant {
    // ------------------------------------------------------
    // Static Methods
    // ------------------------------------------------------
    /**
     * Static method to create a text template
     */
    static text(props) {
        return {
            name: props.variantName,
            templateType: PromptTemplateType.TEXT,
            modelId: props.model.modelArn,
            inferenceConfiguration: {
                text: { ...props.inferenceConfiguration },
            },
            templateConfiguration: {
                text: { ...props.templateConfiguration },
            },
        };
    }
    // ------------------------------------------------------
    // Constructor
    // ------------------------------------------------------
    constructor() { }
}
exports.PromptVariant = PromptVariant;
_a = JSII_RTTI_SYMBOL_1;
PromptVariant[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.PromptVariant", version: "0.1.264" };
/**
 * Prompts are a specific set of inputs that guide FMs on Amazon Bedrock to
 * generate an appropriate response or output for a given task or instruction.
 * You can optimize the prompt for specific use cases and models.
 * @resource AWS::Bedrock::Prompt
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management.html
 */
class Prompt extends constructs_1.Construct {
    // ------------------------------------------------------
    // Import Methods
    // ------------------------------------------------------
    static fromPromptArn(promptArn) {
        const formattedArn = aws_cdk_lib_1.Arn.split(promptArn, aws_cdk_lib_1.ArnFormat.SLASH_RESOURCE_NAME);
        return {
            promptArn: promptArn,
            promptId: formattedArn.resourceName,
        };
    }
    // ------------------------------------------------------
    // Constructor
    // ------------------------------------------------------
    constructor(scope, id, props) {
        super(scope, id);
        // ------------------------------------------------------
        // Set properties or defaults
        // ------------------------------------------------------
        this.promptName = props.promptName;
        this.encryptionKey = props.encryptionKey;
        this.variants = props.variants ?? [];
        // ------------------------------------------------------
        // Validation
        // ------------------------------------------------------
        this.node.addValidation({ validate: () => this.validatePromptName() });
        this.node.addValidation({ validate: () => this.validatePromptVariants() });
        // ------------------------------------------------------
        // L1 Instantiation
        // ------------------------------------------------------
        this._resource = new aws_cdk_lib_1.aws_bedrock.CfnPrompt(this, 'Prompt', {
            customerEncryptionKeyArn: this.encryptionKey?.keyArn,
            defaultVariant: props.defaultVariant?.name,
            description: props.description,
            name: props.promptName,
            variants: aws_cdk_lib_1.Lazy.any({
                produce: () => (this.variants),
            }),
        });
        this.promptArn = this._resource.attrArn;
        this.promptId = this._resource.attrId;
    }
    // ------------------------------------------------------
    // Validation Methods
    // ------------------------------------------------------
    /**
     * Validates whether the prompt name is valid according to the specification.
     * @see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-bedrock-prompt.html#cfn-bedrock-prompt-name
     */
    validatePromptName() {
        const errors = [];
        const matchesPattern = /^([0-9a-zA-Z][_-]?){1,100}$/.test(this.promptName);
        if (!matchesPattern) {
            errors.push('Valid characters are a-z, A-Z, 0-9, _ (underscore) and - (hyphen). And must not begin with a hyphen');
        }
        if (errors.length > 0) {
            errors.unshift(`Invalid prompt name (value: ${this.promptName})`);
        }
        return errors;
    }
    /**
     * Validates whether the number of prompt variants is respected.
     */
    validatePromptVariants() {
        const errors = [];
        if (this.variants.length > 3) {
            errors.push(`Error: Too many variants specified. The maximum allowed is 3, but you have provided ${this.variants.length} variants.`);
        }
        return errors;
    }
    // ------------------------------------------------------
    // Helper Methods
    // ------------------------------------------------------
    /**
     * Creates a prompt version, a static snapshot of your prompt that can be
     * deployed to production.
     */
    createVersion(description) {
        new aws_cdk_lib_1.aws_bedrock.CfnPromptVersion(this, `PromptVersion-${description}`, {
            promptArn: this.promptArn,
            description,
        });
    }
    /**
     * Adds a prompt variant.
     */
    addVariant(variant) {
        this.variants.push(variant);
    }
}
exports.Prompt = Prompt;
_b = JSII_RTTI_SYMBOL_1;
Prompt[_b] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.Prompt", version: "0.1.264" };
//# sourceMappingURL=data:application/json;base64,