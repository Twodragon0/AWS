"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PromptVersion = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const aws_cdk_lib_1 = require("aws-cdk-lib");
const constructs_1 = require("constructs");
/**
 * Creates a version of the prompt.
 *
 * Use this to create a static snapshot of your prompt that can be deployed
 * to production. Versions allow you to easily switch between different
 * configurations for your prompt and update your application with the most
 * appropriate version for your use-case.
 * @resource AWS::Bedrock::PromptVersion
 * @see https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-management-deploy.html
 */
class PromptVersion extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.prompt = props.prompt;
        // L1 instantiation
        this._resource = new aws_cdk_lib_1.aws_bedrock.CfnPromptVersion(this, id, {
            description: props.description,
            promptArn: props.prompt.promptArn,
        });
        this.versionArn = this._resource.attrArn;
        this.version = this._resource.attrVersion;
    }
}
exports.PromptVersion = PromptVersion;
_a = JSII_RTTI_SYMBOL_1;
PromptVersion[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.bedrock.PromptVersion", version: "0.1.264" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbXB0LXZlcnNpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2RrLWxpYi9iZWRyb2NrL3Byb21wdC12ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCw2Q0FBcUQ7QUFDckQsMkNBQXVDO0FBZ0J2Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFhLGFBQWMsU0FBUSxzQkFBUztJQXNCMUMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUF5QjtRQUNqRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUUzQixtQkFBbUI7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHlCQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRTtZQUN0RCxXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7WUFDOUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUztTQUNsQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7SUFFNUMsQ0FBQzs7QUFwQ0gsc0NBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiAgQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIikuIFlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqICB3aXRoIHRoZSBMaWNlbnNlLiBBIGNvcHkgb2YgdGhlIExpY2Vuc2UgaXMgbG9jYXRlZCBhdFxuICpcbiAqICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIG9yIGluIHRoZSAnbGljZW5zZScgZmlsZSBhY2NvbXBhbnlpbmcgdGhpcyBmaWxlLiBUaGlzIGZpbGUgaXMgZGlzdHJpYnV0ZWQgb24gYW4gJ0FTIElTJyBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTXG4gKiAgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnNcbiAqICBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgYXdzX2JlZHJvY2sgYXMgYmVkcm9jayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgUHJvbXB0IH0gZnJvbSAnLi9wcm9tcHQnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvbXB0VmVyc2lvblByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBwcm9tcHQgdG8gdXNlIGZvciB0aGlzIHZlcnNpb24uXG4gICAqL1xuICByZWFkb25seSBwcm9tcHQ6IFByb21wdDtcblxuICAvKipcbiAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBwcm9tcHQgdmVyc2lvbi5cbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaXB0aW9uPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB2ZXJzaW9uIG9mIHRoZSBwcm9tcHQuXG4gKlxuICogVXNlIHRoaXMgdG8gY3JlYXRlIGEgc3RhdGljIHNuYXBzaG90IG9mIHlvdXIgcHJvbXB0IHRoYXQgY2FuIGJlIGRlcGxveWVkXG4gKiB0byBwcm9kdWN0aW9uLiBWZXJzaW9ucyBhbGxvdyB5b3UgdG8gZWFzaWx5IHN3aXRjaCBiZXR3ZWVuIGRpZmZlcmVudFxuICogY29uZmlndXJhdGlvbnMgZm9yIHlvdXIgcHJvbXB0IGFuZCB1cGRhdGUgeW91ciBhcHBsaWNhdGlvbiB3aXRoIHRoZSBtb3N0XG4gKiBhcHByb3ByaWF0ZSB2ZXJzaW9uIGZvciB5b3VyIHVzZS1jYXNlLlxuICogQHJlc291cmNlIEFXUzo6QmVkcm9jazo6UHJvbXB0VmVyc2lvblxuICogQHNlZSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vYmVkcm9jay9sYXRlc3QvdXNlcmd1aWRlL3Byb21wdC1tYW5hZ2VtZW50LWRlcGxveS5odG1sXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9tcHRWZXJzaW9uIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgLyoqXG4gICAqIFRoZSBBbWF6b24gUmVzb3VyY2UgTmFtZSAoQVJOKSBvZiB0aGUgcHJvbXB0IHZlcnNpb24uXG4gICAqIEBleGFtcGxlIFwiYXJuOmF3czpiZWRyb2NrOnVzLWVhc3QtMToxMjM0NTY3ODkwMTI6cHJvbXB0L1BST01QVDEyMzQ1OjFcIlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHZlcnNpb25Bcm46IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHByb21wdCB1c2VkIGJ5IHRoaXMgdmVyc2lvbi5cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBwcm9tcHQ6IFByb21wdDtcblxuICAvKipcbiAgICogVGhlIHZlcnNpb24gb2YgdGhlIHByb21wdCB0aGF0IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHZlcnNpb246IHN0cmluZztcblxuICAvKipcbiAgICogSW5zdGFuY2Ugb2YgcHJvbXB0IHZlcnNpb24uXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IF9yZXNvdXJjZTogYmVkcm9jay5DZm5Qcm9tcHRWZXJzaW9uO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBQcm9tcHRWZXJzaW9uUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgdGhpcy5wcm9tcHQgPSBwcm9wcy5wcm9tcHQ7XG5cbiAgICAvLyBMMSBpbnN0YW50aWF0aW9uXG4gICAgdGhpcy5fcmVzb3VyY2UgPSBuZXcgYmVkcm9jay5DZm5Qcm9tcHRWZXJzaW9uKHRoaXMsIGlkLCB7XG4gICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICBwcm9tcHRBcm46IHByb3BzLnByb21wdC5wcm9tcHRBcm4sXG4gICAgfSk7XG5cbiAgICB0aGlzLnZlcnNpb25Bcm4gPSB0aGlzLl9yZXNvdXJjZS5hdHRyQXJuO1xuICAgIHRoaXMudmVyc2lvbiA9IHRoaXMuX3Jlc291cmNlLmF0dHJWZXJzaW9uO1xuXG4gIH1cblxufSJdfQ==