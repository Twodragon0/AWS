"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmazonAuroraDefaultVectorStore = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
 *  with the License. A copy of the License is located at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
 *  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
 *  and limitations under the License.
 */
const path = require("path");
const cdk = require("aws-cdk-lib");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const rds = require("aws-cdk-lib/aws-rds");
const cdk_nag_1 = require("cdk-nag");
const custom_resource_provider_helper_1 = require("../../common/helpers/custom-resource-provider-helper");
const utils_1 = require("../../common/helpers/utils");
const vpc_helper_1 = require("../../common/helpers/vpc-helper");
/**
  * Creates default AmazonAuroraVectorStore.
  *
  * It includes creation of a VPC with 3 subnets (public,
  * private with NAT Gateway, private without NAT Gateway),
  * with the Amazon Aurora Serverless V2 Cluster.
  * The cluster has 1 writer/reader of PostgreSQL version 15.5
  * instance (min capacity 0.5, max capacity 4). Lambda custom
  * resource executes required pgvector and Amazon Bedrock Knowledge
  * Base SQL queries against Aurora cluster
  * during deployment. The secret containing databases credentials is
  * being deployed and securely stored in AWS Secrets Manager.
  * You must specify the same embeddings model that you used in
  * KnowledgeBase construct.
  * @see https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.VectorDB.html)
  */
class AmazonAuroraDefaultVectorStore extends cdk.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        this.databaseName = 'bedrock_vector_db';
        this.tableName = 'bedrock_integration.bedrock_kb';
        this.primaryKeyField = 'id';
        this.clusterIdentifier = 'aurora-serverless-vector-cluster';
        this.embeddingsModelVectorDimension = props.embeddingsModelVectorDimension;
        this.vpc = (0, vpc_helper_1.buildVpc)(this, {
            defaultVpcProps: (0, vpc_helper_1.DefaultVpcProps)(),
            existingVpc: props.vpc,
        });
        this.vpc.addFlowLog('VpcFlowLog', {
            destination: ec2.FlowLogDestination.toCloudWatchLogs(),
        });
        this.auroraSecurityGroup = new ec2.SecurityGroup(this, 'AuroraSecurityGroup', {
            vpc: this.vpc,
            securityGroupName: 'aurora-security-group',
            description: 'Security group for access to Aurora from Lambda',
        });
        const lambdaSecurityGroup = new ec2.SecurityGroup(this, 'LambdaSecurityGroup', {
            vpc: this.vpc,
            securityGroupName: 'lambda-security-group',
            description: 'Security group for Lambda access to Aurora',
        });
        const auroraCluster = new rds.DatabaseCluster(this, 'AuroraCluster', {
            engine: rds.DatabaseClusterEngine.auroraPostgres({
                version: rds.AuroraPostgresEngineVersion.VER_15_5,
            }),
            credentials: rds.Credentials.fromGeneratedSecret('postgres'),
            clusterIdentifier: this.clusterIdentifier,
            defaultDatabaseName: this.databaseName,
            vpc: this.vpc,
            vpcSubnets: { subnetType: ec2.SubnetType.PUBLIC },
            securityGroups: [this.auroraSecurityGroup],
            iamAuthentication: true,
            storageEncrypted: true,
            serverlessV2MinCapacity: 0.5,
            serverlessV2MaxCapacity: 4,
            writer: rds.ClusterInstance.serverlessV2('AuroraServerlessWriter'),
            readers: [rds.ClusterInstance.serverlessV2('AuroraServerlessReader', { scaleWithWriter: true })],
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        this.credentialsSecretArn = auroraCluster.secret?.secretArn || '';
        this.resourceArn = cdk.Stack.of(this).formatArn({
            service: 'rds',
            resource: 'cluster',
            resourceName: auroraCluster.clusterIdentifier,
            arnFormat: cdk.ArnFormat.COLON_RESOURCE_NAME,
        });
        auroraCluster.addRotationSingleUser();
        this.auroraSecurityGroup.addIngressRule(lambdaSecurityGroup, ec2.Port.tcp(5432), 'Allow PostgreSQL access from Lambda security group');
        // Add Data API access to the Aurora cluster
        const cfnDbCluster = auroraCluster.node.defaultChild;
        cfnDbCluster.addOverride('Properties.EnableHttpEndpoint', true);
        this.auroraPgCRPolicy = new iam.ManagedPolicy(this, 'AuroraPgPolicy', {
            managedPolicyName: (0, utils_1.generatePhysicalNameV2)(this, 'AuroraPgPolicy', { maxLength: 32, lower: true }),
            statements: [
                new iam.PolicyStatement({
                    actions: [
                        'ec2:DescribeInstances',
                        'ec2:CreateNetworkInterface',
                        'ec2:AttachNetworkInterface',
                        'ec2:DescribeNetworkInterfaces',
                        'autoscaling:CompleteLifecycleAction',
                        'ec2:DeleteNetworkInterface',
                    ],
                    resources: ['*'],
                }),
                new iam.PolicyStatement({
                    actions: [
                        'rds-data:BatchExecuteStatement',
                        'rds-data:BeginTransaction',
                        'rds-data:CommitTransaction',
                        'rds-data:ExecuteStatement',
                        'rds-data:RollbackTransaction',
                    ],
                    resources: [
                        cdk.Stack.of(this).formatArn({
                            service: 'rds',
                            resource: 'cluster',
                            resourceName: `${auroraCluster.clusterIdentifier}`,
                        }),
                    ],
                }),
            ],
        });
        cdk_nag_1.NagSuppressions.addResourceSuppressions(this.auroraPgCRPolicy, [
            {
                id: 'AwsSolutions-IAM4',
                reason: 'The AWSLambdaBasicExecutionRole managed policy is required for ' +
                    'the Lambda function to write logs to CloudWatch.',
            },
            {
                id: 'AwsSolutions-IAM5',
                reason: 'This policy is required to allow the custom resource to create a ' +
                    'network interface for the Aurora cluster and it has to be wildcard.',
            },
        ], true);
        cdk_nag_1.NagSuppressions.addResourceSuppressions(auroraCluster, [
            {
                id: 'AwsSolutions-RDS10',
                reason: 'Deletion protection is disabled to make sure a customer can stop ' +
                    'incurring charges if they want to delete the construct.',
            },
        ], true);
        const customResource = (0, custom_resource_provider_helper_1.buildCustomResourceProvider)({
            providerName: 'AmazonAuroraPgVectorCRProvider',
            vpc: this.vpc,
            securityGroup: lambdaSecurityGroup,
            codePath: path.join(__dirname, '../../../lambda/amazon-aurora-pgvector-custom-resources'),
            handler: 'custom_resources.on_event',
            runtime: cdk.aws_lambda.Runtime.PYTHON_3_12,
        });
        const crProvider = customResource.getProvider(this);
        crProvider.role.addManagedPolicy(this.auroraPgCRPolicy);
        auroraCluster.secret?.grantRead(crProvider.role);
        const auroraPgVector = new cdk.CustomResource(this, 'AuroraPgVector', {
            resourceType: 'Custom::AmazonAuroraPgVector',
            serviceToken: crProvider.serviceToken,
            properties: {
                DatabaseName: this.databaseName,
                SecretName: auroraCluster.secret?.secretName || '',
                VectorDimensions: props.embeddingsModelVectorDimension,
            },
        });
        auroraPgVector.node.addDependency(this.auroraPgCRPolicy);
        this.auroraPgCRPolicy.node.addDependency(auroraCluster);
    }
}
exports.AmazonAuroraDefaultVectorStore = AmazonAuroraDefaultVectorStore;
_a = JSII_RTTI_SYMBOL_1;
AmazonAuroraDefaultVectorStore[_a] = { fqn: "@cdklabs/generative-ai-cdk-constructs.amazonaurora.AmazonAuroraDefaultVectorStore", version: "0.1.264" };
//# sourceMappingURL=data:application/json;base64,